#include <LoRa.h>
#include <SPI.h>
#include <Wire.h>

#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

/* Definicoes para comunicação com radio LoRa */
#define SCK_LORA           5
#define MISO_LORA          19
#define MOSI_LORA          27
#define RESET_PIN_LORA     14
#define SS_PIN_LORA        18
 
#define HIGH_GAIN_LORA     20  /* dBm */
#define BAND               915E6  /* 915MHz de frequencia */

/* Definicoes do OLED */
#define OLED_SDA_PIN    4
#define OLED_SCL_PIN    15
#define SCREEN_WIDTH    128 
#define SCREEN_HEIGHT   64  
#define OLED_ADDR       0x3C 
#define OLED_RESET      16
 
/* Offset de linhas no display OLED */
#define OLED_LINE1     0
#define OLED_LINE2     10
#define OLED_LINE3     20
#define OLED_LINE4     30
#define OLED_LINE5     40
#define OLED_LINE6     50
 
/* Definicoes gerais */
#define DEBUG_SERIAL_BAUDRATE    115200
 
/* Variaveis globais */
char *id_sensor = "0";
int psi_table[256];


Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

static const uint8_t scania_logo[1952] = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xff, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xfc, 0xff, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0x83, 0x00, 0x62, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0x7e, 0x80, 0x5d, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xfe, 0x48, 0xbf, 0x4c, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xfe, 0x90, 0x00, 0x02, 0x5f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xfd, 0x20, 0x08, 0x01, 0x5f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xfd, 0x40, 0x5d, 0x01, 0x2f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xfa, 0x40, 0x4d, 0x00, 0xaf, 0xe0, 0x3f, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xfa, 0x80, 0x3d, 0x00, 0x9f, 0x80, 0x0e, 0x00, 0x3c, 0x03, 0x01, 0xe0, 0x03, 0x00, 0xff, 0xc0, 
    0xfa, 0x00, 0x42, 0x80, 0x57, 0x00, 0x04, 0x00, 0x18, 0x03, 0x00, 0xe0, 0x03, 0x00, 0x7f, 0xc0, 
    0xf9, 0x81, 0x31, 0x00, 0x66, 0x02, 0x00, 0x00, 0x08, 0x01, 0x00, 0x60, 0x02, 0x00, 0x7f, 0xc0, 
    0xfd, 0x01, 0x00, 0x40, 0x4e, 0x07, 0x00, 0x0c, 0x00, 0x01, 0x00, 0x20, 0x02, 0x00, 0x3f, 0xc0, 
    0xfe, 0xc4, 0xe1, 0x40, 0xde, 0x00, 0x00, 0x1e, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0, 
    0xff, 0x43, 0x22, 0x41, 0x5e, 0x00, 0x00, 0x3f, 0xf0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0, 
    0xfe, 0xa0, 0x8b, 0x03, 0x5f, 0x00, 0x00, 0x3f, 0xe0, 0x40, 0x00, 0x00, 0x00, 0x18, 0x1f, 0xc0, 
    0xfe, 0x90, 0x4c, 0x22, 0x5f, 0xc0, 0x00, 0x1e, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1f, 0xc0, 
    0xfe, 0x90, 0x20, 0x84, 0x3c, 0x07, 0x00, 0x0c, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x0f, 0xc0, 
    0xfe, 0x88, 0x40, 0x84, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0f, 0xc0, 
    0xff, 0x48, 0x42, 0x0c, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0xc0, 
    0xff, 0x44, 0x10, 0x99, 0x7f, 0x00, 0x06, 0x00, 0x01, 0xf8, 0x07, 0x80, 0x00, 0x7e, 0x07, 0xc0, 
    0xff, 0xa4, 0x23, 0x10, 0x7f, 0xe0, 0x7f, 0xc1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0x92, 0x14, 0x12, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xca, 0x08, 0x2d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xe7, 0x00, 0x33, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xfb, 0x00, 0x67, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xfc, 0xff, 0x5f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xfe, 0x80, 0x5f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xfe, 0xd5, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xff, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0
};
 
/* Declaração de funções */
bool loRaInit(void);
/*
 * Funcao: inicia comunicação com chip LoRa
 * Parametros: nenhum
 * Retorno: true: comunicacao ok
 *          false: falha na comunicacao
 */

bool displayInit(void);
/*
Funcao: inicia a comunicacao com chip LoRa
Parametros: nenhum
Retorno: true: comunicação ok
         false: falha na comunicacao
*/

bool loRaInit(void)
{
    bool status_init = false;
    Serial.println("[LoRa Sender] Tentando iniciar comunicacao com o radio LoRa...");
    SPI.begin(SCK_LORA, MISO_LORA, MOSI_LORA, SS_PIN_LORA);
    LoRa.setPins(SS_PIN_LORA, RESET_PIN_LORA, LORA_DEFAULT_DIO0_PIN);
     
    if (!LoRa.begin(BAND)) 
    {
        Serial.println("[LoRa Sender] Comunicacao com o radio LoRa falhou. Nova tentativa em 1 segundo...");        
        delay(1000);
        status_init = false;
    }
    else
    {
        /* Configura o ganho do receptor LoRa para 20dBm, o maior ganho possível (visando maior alcance possível) */
        LoRa.setTxPower(HIGH_GAIN_LORA); 
        Serial.println("[LoRa Sender] Comunicacao com o radio LoRa ok");
        status_init = true;
    }

 
    return status_init;
}

bool displayInit(void)
{
    if(!display.begin(SSD1306_SWITCHCAPVCC, OLED_ADDR)) 
    {
        Serial.println("[LoRa Receiver] Falha ao inicializar comunicacao com OLED");
    }
    else
    {
        Serial.println("[LoRa Receiver] Comunicacao com OLED inicializada com sucesso");
     
        /* Limpa display e configura tamanho de fonte */
        display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(WHITE);
        return false;
    }
}
 
/* Funcao de setup */
void setup() 
{    
    Serial.begin(DEBUG_SERIAL_BAUDRATE);
    Wire.begin(OLED_SDA_PIN, OLED_SCL_PIN);
    psi_table[0] = 0;
psi_table[1] = 26;
psi_table[2] = 26;
psi_table[3] = 26;
psi_table[4] = 26;
psi_table[5] = 26;
psi_table[6] = 26;
psi_table[7] = 26;
psi_table[8] = 26;
psi_table[9] = 26;
psi_table[10] = 26;
psi_table[11] = 26;
psi_table[12] = 26;
psi_table[13] = 26;
psi_table[14] = 29;
psi_table[15] = 29;
psi_table[16] = 29;
psi_table[17] = 31;
psi_table[18] = 31;
psi_table[19] = 31;
psi_table[20] = 31;
psi_table[21] = 31;
psi_table[22] = 31;
psi_table[23] = 31;
psi_table[24] = 31;
psi_table[25] = 31;
psi_table[26] = 31;
psi_table[27] = 31;
psi_table[28] = 31;
psi_table[29] = 31;
psi_table[30] = 34;
psi_table[31] = 34;
psi_table[32] = 34;
psi_table[33] = 34;
psi_table[34] = 34;
psi_table[35] = 34;
psi_table[36] = 34;
psi_table[37] = 34;
psi_table[38] = 34;
psi_table[39] = 34;
psi_table[40] = 34;
psi_table[41] = 34;
psi_table[42] = 34;
psi_table[43] = 34;
psi_table[44] = 37;
psi_table[45] = 37;
psi_table[46] = 37;
psi_table[47] = 37;
psi_table[48] = 37;
psi_table[49] = 40;
psi_table[50] = 40;
psi_table[51] = 40;
psi_table[52] = 40;
psi_table[53] = 40;
psi_table[54] = 40;
psi_table[55] = 40;
psi_table[56] = 40;
psi_table[57] = 40;
psi_table[58] = 40;
psi_table[59] = 40;
psi_table[60] = 40;
psi_table[61] = 40;
psi_table[62] = 40;
psi_table[63] = 40;
psi_table[64] = 40;
psi_table[65] = 43;
psi_table[66] = 43;
psi_table[67] = 43;
psi_table[68] = 43;
psi_table[69] = 43;
psi_table[70] = 43;
psi_table[71] = 43;
psi_table[72] = 43;
psi_table[73] = 43;
psi_table[74] = 43;
psi_table[75] = 46;
psi_table[76] = 46;
psi_table[77] = 46;
psi_table[78] = 46;
psi_table[79] = 46;
psi_table[80] = 46;
psi_table[81] = 46;
psi_table[82] = 46;
psi_table[83] = 46;
psi_table[84] = 46;
psi_table[85] = 46;
psi_table[86] = 49;
psi_table[87] = 49;
psi_table[88] = 49;
psi_table[89] = 49;
psi_table[90] = 49;
psi_table[91] = 49;
psi_table[92] = 49;
psi_table[93] = 49;
psi_table[94] = 49;
psi_table[95] = 49;
psi_table[96] = 49;
psi_table[97] = 52;
psi_table[98] = 52;
psi_table[99] = 52;
psi_table[100] = 52;
psi_table[101] = 52;
psi_table[102] = 52;
psi_table[103] = 52;
psi_table[104] = 52;
psi_table[105] = 52;
psi_table[106] = 52;
psi_table[107] = 52;
psi_table[108] = 52;
psi_table[109] = 52;
psi_table[110] = 52;
psi_table[111] = 55;
psi_table[112] = 55;
psi_table[113] = 55;
psi_table[114] = 55;
psi_table[115] = 55;
psi_table[116] = 55;
psi_table[117] = 55;
psi_table[118] = 55;
psi_table[119] = 58;
psi_table[120] = 58;
psi_table[121] = 58;
psi_table[122] = 58;
psi_table[123] = 58;
psi_table[124] = 58;
psi_table[125] = 58;
psi_table[126] = 58;
psi_table[127] = 58;
psi_table[128] = 58;
psi_table[129] = 58;
    Wire.begin(4, 0);
    
    while (!Serial);

    Serial.println("Iniciando comunicação com display");
    
    while(displayInit());

    display.clearDisplay();    
    
    display.setCursor(0, OLED_LINE1);
    display.drawBitmap(0, 10, scania_logo, 128, 64, 1);
    display.display();

    delay(5000);
    display.clearDisplay();
    display.println("Display: OK");

    display.println("LoRa: ...");
    display.display();
    while(loRaInit() == false);

    display.println("LoRa: OK");
    display.display();
    delay(2000);
}
 
/* Programa principal */
void loop() 
{
    int lora_rssi = LoRa.packetRssi();
    if (lora_rssi < 0) {lora_rssi = lora_rssi * -1;}
    
    float info = 0;
    int number = 0;

    int soma = 0, precision = 50;
    float med = 0;
    
    for(int i = 0; i<=precision; i++){
        number = analogRead(34);
        if(number > 129) {number = 129;}
        soma += psi_table[number];
    }
    
    med = soma / precision;

    info = med;
  
    display.clearDisplay();
    display.setTextSize(1);
    display.setCursor(0, OLED_LINE1);
    display.println("Sensor Data: ");
    display.println("---------------------");
    display.setTextSize(2);
    display.print(info);
    display.println(" PSI");
    display.setTextSize(1); 
    display.print("Analog: ");
    display.println(analogRead(34));
    
    display.display();
    /*
    char lora_string[10] = "";
    int parsed_info = info;
    sprintf(lora_string,"%d", parsed_info);
    
    strcat(lora_string, ",");
    strcat(lora_string, id_sensor);

    */

    LoRa.beginPacket();
    LoRa.println(id_sensor);
    LoRa.println(info);
    LoRa.endPacket();

    delay(1000);
     
}
